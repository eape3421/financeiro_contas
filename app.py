import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import speech_recognition as sr
from PIL import Image

st.set_page_config(page_title="Controle Financeiro", layout="wide")
st.markdown("## üìä Controle Financeiro Pessoal")
st.markdown("Gerencie seus gastos, visualize gr√°ficos e envie relat√≥rios por e-mail.")
st.markdown("---")

# Abas principais
aba1, aba2, aba3, aba4 = st.tabs(["üìÅ Planilha", "üí∏ Gr√°ficos", "üéôÔ∏è Voz & üì∑ Imagem", "üìß E-mail"])

# Vari√°vel para armazenar dados manuais
dados_digitados = pd.DataFrame(columns=["Data", "Categoria", "Valor", "Descri√ß√£o"])
df_completo = pd.DataFrame(columns=["Data", "Categoria", "Valor", "Descri√ß√£o"])
with aba1:
    st.subheader("üìÅ Upload da planilha")
    uploaded_file = st.file_uploader("Envie sua planilha de gastos (.csv)", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
        st.success("Planilha carregada com sucesso!")
        min_date = df['Data'].min()
        max_date = df['Data'].max()
        start_date, end_date = st.date_input("üìÖ Selecione o per√≠odo", [min_date, max_date])
        df_filtrado = df[(df['Data'] >= pd.to_datetime(start_date)) & (df['Data'] <= pd.to_datetime(end_date))]
    else:
        df_filtrado = pd.DataFrame()

    st.markdown("### ‚úçÔ∏è Adicionar gasto manualmente")
    with st.form("formulario_manual"):
        data_manual = st.date_input("Data do gasto", value=datetime.today())
        categorias_opcoes = [
            "Transporte", "Alimenta√ß√£o", "Cart√£o de cr√©dito", "Cart√£o de d√©bito",
            "PIX", "Lazer", "Sa√∫de", "Receita"
        ]
        categoria_manual = st.selectbox("Categoria", categorias_opcoes)
        valor_manual = st.number_input("Valor", min_value=0.0, format="%.2f")
        descricao_manual = st.text_input("Descri√ß√£o")
        enviar_manual = st.form_submit_button("Adicionar")
        if enviar_manual:
            novo_dado = pd.DataFrame({
                "Data": [data_manual],
                "Categoria": [categoria_manual],
                "Valor": [valor_manual],
                "Descri√ß√£o": [descricao_manual]
            })
            dados_digitados = pd.concat([dados_digitados, novo_dado], ignore_index=True)
            st.success("Gasto adicionado com sucesso!")
    st.dataframe(dados_digitados)
    st.markdown("### üì§ Exportar dados para Excel")
if st.button("Exportar Excel"):
    df_completo.to_excel("relatorio_financeiro.xlsx", index=False)
    st.success("Arquivo 'relatorio_financeiro.xlsx' gerado com sucesso!")

    # Combinar dados da planilha com os digitados
    if not df_filtrado.empty:
        df_completo = pd.concat([df_filtrado, dados_digitados], ignore_index=True)
    else:
        df_completo = dados_digitados

with aba2:
    if not df_completo.empty:
        st.subheader("üìä Dashboard Financeiro")

        total_receita = df_completo[df_completo["Categoria"] == "Receita"]["Valor"].sum()
        total_despesa = df_completo[df_completo["Categoria"] != "Receita"]["Valor"].sum()
        saldo = total_receita - total_despesa
        economia_percentual = (saldo / total_receita * 100) if total_receita > 0 else 0

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üí∞ Receita", f"R$ {total_receita:.2f}")
        col2.metric("üìâ Despesa", f"R$ {total_despesa:.2f}")
        col3.metric("üìä Saldo", f"R$ {saldo:.2f}")
        col4.metric("üìà Economia (%)", f"{economia_percentual:.1f}%")

        st.markdown("---")
        st.subheader("üéØ Meta de economia mensal")
        meta = st.number_input("Defina sua meta de economia (R$)", min_value=0.0, format="%.2f")
        if meta > 0:
            if saldo >= meta:
                st.success(f"‚úÖ Meta atingida! Voc√™ economizou R$ {saldo:.2f}")
            else:
                st.error(f"‚ö†Ô∏è Meta n√£o atingida. Faltam R$ {meta - saldo:.2f}")

        st.markdown("---")
        st.subheader("üìä Gastos por categoria (barra)")
        categoria_total = df_completo[df_completo["Categoria"] != "Receita"].groupby("Categoria")["Valor"].sum()
        fig_bar, ax_bar = plt.subplots()
        categoria_total.plot(kind="bar", ax=ax_bar)
        st.pyplot(fig_bar)

        st.subheader("ü•ß Gastos por categoria (pizza)")
        fig_pie, ax_pie = plt.subplots()
        categoria_total.plot(kind="pie", ax=ax_pie, autopct="%1.1f%%")
        ax_pie.set_ylabel("")
        st.pyplot(fig_pie)
    else:
        st.warning("Adicione dados manualmente ou envie uma planilha na aba 'üìÅ Planilha'.")

with aba3:
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("üéôÔ∏è Adicionar gasto por voz")
        if st.button("Gravar"):
            r = sr.Recognizer()
            with sr.Microphone() as source:
                st.info("Fale agora...")
                audio = r.listen(source)
            try:
                texto = r.recognize_google(audio, language="pt-BR")
                st.success(f"Voc√™ disse: {texto}")
            except:
                st.error("N√£o foi poss√≠vel reconhecer a fala.")
    with col2:
        st.subheader("üì∑ Adicionar comprovante por imagem")
        imagem = st.file_uploader("Envie uma imagem", type=["jpg", "png"])
        if imagem:
            img = Image.open(imagem)
            st.image(img, caption="Comprovante enviado", use_column_width=True)

with aba4:
    st.subheader("üìß Enviar relat√≥rio por e-mail")
    destinatario = st.text_input("E-mail do destinat√°rio")
    if st.button("Enviar"):
        if not df_completo.empty:
            try:
                msg = MIMEMultipart()
                msg['From'] = "seuemail@gmail.com"
                msg['To'] = destinatario
                msg['Subject'] = "Relat√≥rio Financeiro"
                corpo = f"Relat√≥rio de gastos:\n\n{df_completo.to_string(index=False)}"
                msg.attach(MIMEText(corpo, 'plain'))
                servidor = smtplib.SMTP('smtp.gmail.com', 587)
                servidor.starttls()
                servidor.login("seuemail@gmail.com", "sua_senha_de_app")
                servidor.send_message(msg)
                servidor.quit()
                st.success("Relat√≥rio enviado com sucesso!")
            except Exception as e:
                st.error(f"Erro ao enviar e-mail: {e}")
        else:
            st.warning("Adicione dados ou carregue uma planilha para enviar o relat√≥rio.")
